<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.heeexy.example.dao.BrowseRecordDao">
    <resultMap id="recordMap" type="com.heeexy.example.util.model.One2Many">
        <id column="userId" property="userId"/>
        <result column="uuId" property="uuId"/>
        <result column="username" property="username"/>
        <result column="sex" property="sex"/>
        <result column="categoriesName" property="categoriesName"/>
        <result column="postId" property="postId"/>
        <result column="postText" property="postText"/>
        <result column="postState" property="postState"/>
        <result column="browseTime" property="browseTime"/>

    </resultMap>
    <update id="updateRecord">

        UPDATE browse_records
        SET last_browse_time = #{browseTime}
        WHERE user_uuid = #{uuId} AND post_id = #{postId}

    </update>

    <insert id="addRecord">
        INSERT INTO browse_records(user_uuid, post_id)
        VALUES (#{uuId},#{postId})
    </insert>

    <select id="getRecords" resultMap="recordMap">
        SELECT
        u.id                                                                  userId,
        u.uuid                                                                uuId,
        u.username                                                            username,
        u.sex                                                                 sex,
        (SELECT categories_name FROM post_categories p1,post_table p2
        WHERE p1.categories_id = p2.post_type_id AND p2.post_id = b.post_id ) categoriesName,
        p.post_id                                                             postId,
        p.post_text                                                           postText,
        p.post_state                                                          postState,
        DATE_FORMAT(b.last_browse_time, '%Y.%m.%d %T')                        browseTime
        FROM
        browse_records b
        left join post_table p on p.post_id = b.post_id
        left join user u on b.user_uuid = u.uuid
        <where>
            <if test="querykey != null and querykey != '' ">
                u.username LIKE concat('%',#{querykey},'%')
            </if>
            <if test="queryText != null and queryText != '' ">
                and p.post_text LIKE concat('%',#{queryText},'%')
            </if>
            <if test="beforeDate != null and beforeDate != '' and afterDate !=null and afterDate !=''">
                and DATE(b.last_browse_time) between #{beforeDate} and #{afterDate}
            </if>
        </where>
        ORDER BY u.id
        LIMIT #{offSet}, #{pageRow}
    </select>
    <select id="getRecordsByName" resultType="com.alibaba.fastjson.JSONObject">
        SELECT
        u.uuid                                                           uuId,
        u.username                                                            username,
        u.sex                                                                 sex,
        (SELECT categories_name FROM post_categories p1,post_table p2
        WHERE p1.categories_id = p2.post_type_id AND p2.post_id = b.post_id )  categoriesName,
        p.post_id                                                             postId,
        p.post_text                                                           postText,
        p.post_state                                                          postState,
        b.last_browse_time                                                    lastTime
        FROM
        browse_records b
        left join post_table p on p.post_id = b.post_id
        left join user u on b.user_uuid = u.uuid
        <where>
            <if test="querykey != null and querykey != '' ">
                username LIKE concat('%',#{querykey},'%')
            </if>
        </where>
    </select>
    <select id="countRecord" resultType="java.lang.Integer">
        SELECT count(0)
        FROM browse_records


    </select>

    <!--根据帖子id查询浏览过此帖子的uuId -->
    <select id="getUUIDByPostId" resultType="com.alibaba.fastjson.JSONObject">
--         SELECT
--         u.*,
--         b.post_id                                            postId,
--         b.last_browse_time                                   browseTime
--         FROM
--               (
--                  SELECT
--                      id                                      userId,
--                      uuid                                    uuId,
--                      username                                username,
--                      iconurl                                 iconUrl,
--                  FROM example.user
--               ) u
--         LEFT JOIN browse_records b on b.user_uuid = u.uuId
--         LEFT JOIN post_table p on p.post_id = b.post_id
--         WHERE
--         b.post_id = #{postId}
--         ORDER BY browseTime DESC
          SELECT
            DISTINCT(b.user_uuid)     uuId
            from user u, browse_records b
            where u.uuid = b.user_uuid
            and b.post_id = #{postId}

    </select>
    <select id="getRecordsByUUID" resultMap="recordMap">
        SELECT
        DISTINCT(post_id)                  postId,
        MAX(last_browse_time)              browseTime,
        user_uuid                          uuId
        FROM  browse_records
        WHERE user_uuid = #{uuId}
        GROUP BY post_id
    </select>

    <!--统计帖子浏览量-->
    <select id="countPostBrowse" resultType="java.lang.Integer">
        SELECT count(0) FROM browse_records WHERE post_id = #{postId}
    </select>
</mapper>